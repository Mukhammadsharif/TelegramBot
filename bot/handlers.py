from bot.keyboards import send_contact, booking_menu, send_location, location_menu, confirm_menu, \
    who_are_you, yes_or_no
from .booking import after_booking_
from .get_answer_from_drivers import get_answer_from_drivers
from .mark import mark_ser
from .models import Users, Booking, Driver
from .text import booking_type_list


def start(chat, **kwargs):
    if Booking.objects.all():
        booking_object = Booking.objects.get(chat_id=chat.chat_id)
        if booking_object:
            booking_object.delete()
    chat.send_message(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –¢–∞–∫—Å–∏ –±–æ—Ç, {chat.first_name}!')
    chat.send_message('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', reply_markup=who_are_you())


def registering_user(chat, message, redirect, *args, **kwargs):
    message = message.text
    if message == '–ü–æ—Å—Å–∞–∂–∏—Ä—å ü§µ':
        if not Users.objects.filter(chat_id=chat.chat_id):
            Users.objects.get_or_create(type=chat.type, first_name=chat.first_name, chat_id=chat.chat_id,
                                        username=chat.username)
            chat.send_message(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –¢–∞–∫—Å–∏ –±–æ—Ç, {chat.first_name}!', reply_markup=send_contact())
        else:
            chat.send_message(f'–†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, {chat.first_name}!')
            if Users.objects.get(chat_id=chat.chat_id).number:
                chat.send_message(f'–û—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å {chat.first_name}?', reply_markup=send_location())
            else:
                chat.send_message('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã', reply_markup=send_contact())


def registering_driver(chat, message, *args, **kwargs):
    message = message.text
    if message == '–í–æ–¥–∏—Ç–µ–ª—å üë®‚Äç‚úàÔ∏è':
        if not Driver.objects.filter(chat_id=chat.chat_id):
            Driver.objects.get_or_create(first_name=chat.first_name, chat_id=chat.chat_id,
                                         username=chat.username)
            chat.send_message(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –¢–∞–∫—Å–∏ –±–æ—Ç, {chat.first_name}!', reply_markup=send_contact())
        elif Driver.objects.filter(chat_id=chat.chat_id):
            chat.send_message(f'–í—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å, {chat.first_name}?', reply_markup=yes_or_no())


def ask_confirming(chat, message, *args, **kwargs):
    if message.text == '–î–∞':
        chat.send_message('–ñ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—å—Å—è –∑–∞–∫–∞–∑—ã')
        driver = Driver.objects.get(chat_id=chat.chat_id)
        driver.ready = True
        driver.save()

    elif message.text == '–ù–µ—Ç':
        chat.send_message('–ù–∏—á–µ–≥–æ, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª–µ–¥—É–µ—â–µ–π —Ä–∞–∑, –º—ã –±—É–¥–µ–º –≤–∞—Å –∂–¥–∞—Ç—å!')


def ask_number_from_driver(chat, phone, *args, **kwargs):
    if Driver.objects.filter(chat_id=chat.chat_id):
        driver = Driver.objects.get(chat_id=chat.chat_id)
        driver.number = phone
        driver.save()
        chat.send_message(f'–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã')


def ask_car(chat, message, *args, **kwargs):
    driver = Driver.objects.get(chat_id=chat.chat_id)
    driver.car = message.text
    driver.save()
    chat.send_message(f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã')


def ask_number_of_car(chat, message, *args, **kwargs):
    driver = Driver.objects.get(chat_id=chat.chat_id)
    driver.number_of_car = message.text
    driver.save()
    chat.send_message(f'–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –º–∞—à–∏–Ω—ã')


def ask_color(chat, message, *args, **kwargs):
    driver = Driver.objects.get(chat_id=chat.chat_id)
    driver.color_of_car = message.text
    driver.save()
    chat.send_message(f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    chat.send_message(f'–í—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å, {chat.first_name}?', reply_markup=yes_or_no())


def ask_number(chat, phone, *args, **kwargs):
    user = Users.objects.get(chat_id=chat.chat_id)
    user.number = phone
    user.save()
    chat.send_message(f'–û—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å {chat.first_name}?', reply_markup=send_location())


def ask_location(chat, location, *args, **kwargs):
    Booking.objects.get_or_create(latitude_from=location['latitude'], longitude_from=location['longitude'],
                                  chat_id=chat.chat_id)
    chat.send_message('–£–∫–∞–∂–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ?', reply_markup=location_menu())
    chat.send_message('–ï—Å–ª–∏ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–æ –∫–∞—Ä—Ç–µ, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ªüîó –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ Location')
    chat.send_message('–ê –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')


def ask_direction(chat, message, *args, **kwargs):
    if message.text == '–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é(–ø–∏—Å—å–º–µ–Ω–Ω–æ) ‚úí':
        chat.send_message('–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –∏–ª–∏ —Ç–æ—á–Ω—É—é –∞–¥—Ä–µ—Å')


def booking_text(chat, message, *args, **kwargs):
    if not message.text == '–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é(–ø–∏—Å—å–º–µ–Ω–Ω–æ) ‚úí':
        Booking.objects.filter(chat_id=chat.chat_id).update(address_text=message.text)
        chat.send_message('–í–∞—à –ø—É—Ç—å –∏–∑–≤–µ—Å—Ç–µ–Ω, –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏', reply_markup=booking_menu())
    else:
        chat.send_message('–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –∏–ª–∏ —Ç–æ—á–Ω—É—é –∞–¥—Ä–µ—Å')


def booking_coordinate(chat, message, location, *args, **kwargs):
    if not message.text == '–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é(–ø–∏—Å—å–º–µ–Ω–Ω–æ) ‚úí':
        Booking.objects.filter(chat_id=chat.chat_id).update(address_latitude=location['latitude'],
                                                            address_longitude=location['longitude'])
        chat.send_message('–í–∞—à –ø—É—Ç—å –∏–∑–≤–µ—Å—Ç–µ–Ω, –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏', reply_markup=booking_menu())
        chat.send_message(f'{booking_type_list()}')
    else:
        chat.send_message('–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –∏–ª–∏ —Ç–æ—á–Ω—É—é –∞–¥—Ä–µ—Å')


def booking_answer(chat, message, *args, **kwargs):
    message = message.text
    type_list = ['–ë—ã—Å—Ç—Ä–æ üöÄ', '–ö–æ–º—Ñ–æ—Ä—Ç üöï', '–ö–æ–º—Ñ–æ—Ä—Ç+ üöñ', '–î–µ—Ç—Å–∫–∏–π üõ¥', '–ì—Ä—É–∑–∞–≤–æ–π üöö', '–î–æ—Å—Ç–∞–≤–∫–∞ üöõ']
    for i in type_list:
        if message == i:
            Booking.objects.filter(chat_id=chat.chat_id).update(type=message)
            chat.send_message(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø —É—Å–ª—É–≥–∏: {message}')
            chat.send_message(f'{chat.first_name}, –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã?', reply_markup=confirm_menu())


def after_booking(chat, message, *args, **kwargs):
    after_booking_(chat, message, *args, **kwargs)


def mark_service(chat, callback_data, *args, **kwargs):
    mark_ser(chat, callback_data, *args, **kwargs)


def get_answer_from_driver(chat, callback_data, *args, **kwargs):
    get_answer_from_drivers(chat, callback_data, *args, **kwargs)


def ask_next_booking(chat, message, *args, **kwargs):
    if message.text == '–ì–æ—Ç–æ–≤o, –∂–¥—É –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã üîé':
        Driver.objects.filter(chat_id=chat.chat_id).update(busy=False)
        chat.send_message('–ñ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã')
    else:
        chat.send_message('–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ, –±—É–¥–µ–º –≤–∞—Å –∂–¥–∞—Ç—å')

